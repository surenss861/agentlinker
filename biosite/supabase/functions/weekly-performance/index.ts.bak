import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface WeeklyStats {
  views: number
  requests: number
  bookings: number
  listings: number
  conversion_rate: number
  top_listing?: {
    title: string
    views: number
    requests: number
  }
}

interface User {
  id: string
  email: string
  full_name: string
  subscription_tier: string
}

serve(async (req) => {
  // Handle CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    const supabase = createClient(supabaseUrl, supabaseServiceKey)

    // Get all active users (excluding free users for now - focus on trial/pro users)
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, email, full_name, subscription_tier')
      .in('subscription_tier', ['trial', 'pro'])

    if (usersError) {
      console.error('Error fetching users:', usersError)
      return new Response(JSON.stringify({ error: 'Failed to fetch users' }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      })
    }

    const emailPromises = users.map(async (user: User) => {
      try {
        const weeklyStats = await getWeeklyStats(supabase, user.id)
        
        if (weeklyStats.views === 0 && weeklyStats.requests === 0) {
          // Skip users with no activity this week
          return null
        }

        await sendWeeklyEmail(user, weeklyStats)
        console.log(`Weekly email sent to ${user.email}`)
        return user.email
      } catch (error) {
        console.error(`Failed to send email to ${user.email}:`, error)
        return null
      }
    })

    const results = await Promise.all(emailPromises)
    const successfulEmails = results.filter(email => email !== null)

    return new Response(JSON.stringify({ 
      message: `Weekly emails sent successfully`,
      count: successfulEmails.length,
      emails: successfulEmails
    }), {
      status: 200,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })

  } catch (error) {
    console.error('Weekly performance email error:', error)
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    })
  }
})

async function getWeeklyStats(supabase: any, userId: string): Promise<WeeklyStats> {
  const oneWeekAgo = new Date()
  oneWeekAgo.setDate(oneWeekAgo.getDate() - 7)

  // Get analytics for the past week
  const { data: analytics } = await supabase
    .from('analytics')
    .select('*')
    .eq('user_id', userId)
    .gte('created_at', oneWeekAgo.toISOString())

  // Get leads for the past week
  const { data: leads } = await supabase
    .from('leads')
    .select('*')
    .eq('user_id', userId)
    .gte('created_at', oneWeekAgo.toISOString())

  // Get bookings for the past week
  const { data: bookings } = await supabase
    .from('bookings')
    .select('*')
    .eq('user_id', userId)
    .gte('created_at', oneWeekAgo.toISOString())

  // Get active listings
  const { data: listings } = await supabase
    .from('listings')
    .select('*')
    .eq('user_id', userId)
    .eq('status', 'active')

  // Calculate views (analytics events)
  const views = analytics?.filter(a => a.event_type === 'view').length || 0
  
  // Calculate conversion rate
  const requests = leads?.length || 0
  const conversion_rate = views > 0 ? (requests / views) * 100 : 0

  // Find top performing listing (mock for now)
  const top_listing = listings && listings.length > 0 ? {
    title: listings[0].title,
    views: Math.floor(views / (listings.length || 1)),
    requests: Math.floor(requests / (listings.length || 1))
  } : undefined

  return {
    views,
    requests,
    bookings: bookings?.length || 0,
    listings: listings?.length || 0,
    conversion_rate: Math.round(conversion_rate * 10) / 10,
    top_listing
  }
}

async function sendWeeklyEmail(user: User, stats: WeeklyStats) {
  const emailData = {
    to: user.email,
    subject: `üìä Your AgentLinker Weekly Performance Report`,
    template: 'weekly-performance',
    data: {
      user_name: user.full_name || 'Agent',
      stats,
      subscription_tier: user.subscription_tier,
      upgrade_cta: user.subscription_tier === 'trial' ? {
        text: 'Unlock deeper analytics and unlimited listings',
        button: 'Upgrade to Pro',
        link: 'https://agentlinker.com/dashboard/billing'
      } : null
    }
  }

  // For now, we'll just log the email content
  // In production, you'd integrate with SendGrid, Resend, or similar
  console.log('üìß Weekly Performance Email:', {
    to: emailData.to,
    subject: emailData.subject,
    content: generateEmailHTML(user, stats)
  })

  // TODO: Replace with actual email service
  // await emailService.send(emailData)
}

function generateEmailHTML(user: User, stats: WeeklyStats): string {
  const isTrial = user.subscription_tier === 'trial'
  
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>Your AgentLinker Weekly Report</title>
      <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 0; background: #f8f9fa; }
        .container { max-width: 600px; margin: 0 auto; background: white; }
        .header { background: linear-gradient(135deg, #912F40, #702632); color: white; padding: 40px 20px; text-align: center; }
        .content { padding: 40px 20px; }
        .stats-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px; margin: 30px 0; }
        .stat-card { background: #f8f9fa; padding: 20px; border-radius: 12px; text-align: center; }
        .stat-number { font-size: 32px; font-weight: bold; color: #912F40; }
        .stat-label { color: #666; font-size: 14px; margin-top: 5px; }
        .cta-section { background: linear-gradient(135deg, #F3C77E, #FFD89C); padding: 30px; border-radius: 12px; margin: 30px 0; text-align: center; }
        .cta-button { background: #912F40; color: white; padding: 15px 30px; border-radius: 8px; text-decoration: none; display: inline-block; font-weight: bold; }
        .footer { background: #f8f9fa; padding: 20px; text-align: center; color: #666; font-size: 12px; }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h1>üéØ Your Weekly Performance Report</h1>
          <p>Great work this week, ${user.full_name || 'Agent'}!</p>
        </div>
        
        <div class="content">
          <h2>üìä This Week's Highlights</h2>
          
          <div class="stats-grid">
            <div class="stat-card">
              <div class="stat-number">${stats.views}</div>
              <div class="stat-label">Page Views</div>
            </div>
            <div class="stat-card">
              <div class="stat-number">${stats.requests}</div>
              <div class="stat-label">Showing Requests</div>
            </div>
            <div class="stat-card">
              <div class="stat-number">${stats.bookings}</div>
              <div class="stat-label">Bookings</div>
            </div>
            <div class="stat-card">
              <div class="stat-number">${stats.conversion_rate}%</div>
              <div class="stat-label">Conversion Rate</div>
            </div>
          </div>

          ${stats.top_listing ? `
            <div style="background: #f0f8ff; padding: 20px; border-radius: 12px; margin: 20px 0;">
              <h3>üèÜ Your Top Listing</h3>
              <p><strong>${stats.top_listing.title}</strong></p>
              <p>${stats.top_listing.views} views ‚Ä¢ ${stats.top_listing.requests} requests</p>
            </div>
          ` : ''}

          ${isTrial ? `
            <div class="cta-section">
              <h3>üöÄ Ready to unlock your full potential?</h3>
              <p>Upgrade to Pro for unlimited listings, advanced analytics, and priority support.</p>
              <a href="https://agentlinker.com/dashboard/billing" class="cta-button">
                Upgrade to Pro - $20/month
              </a>
              <p style="margin-top: 15px; font-size: 14px; color: #666;">
                One extra deal pays for 6 months of AgentLinker Pro
              </p>
            </div>
          ` : `
            <div style="background: #f0f8ff; padding: 20px; border-radius: 12px; margin: 20px 0;">
              <h3>üéâ Pro Member Benefits</h3>
              <p>You're getting the full AgentLinker experience with unlimited listings and advanced analytics.</p>
              <a href="https://agentlinker.com/dashboard/analytics" class="cta-button">
                View Detailed Analytics
              </a>
            </div>
          `}

          <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee;">
            <h3>üí° Pro Tips for Next Week</h3>
            <ul>
              <li>Share your AgentLinker page on Instagram stories</li>
              <li>Update your listings with fresh photos</li>
              <li>Respond to showing requests within 2 hours</li>
              ${stats.conversion_rate < 5 ? '<li>Consider adding more property details to improve conversion</li>' : ''}
            </ul>
          </div>
        </div>
        
        <div class="footer">
          <p>This email was sent by AgentLinker. <a href="https://agentlinker.com/dashboard/settings">Manage your email preferences</a></p>
          <p>¬© 2024 AgentLinker. All rights reserved.</p>
        </div>
      </div>
    </body>
    </html>
  `
}
